using OKGamesFramework;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using UnityEditor;

namespace OKGamesLib {

    /// <summary>
    /// Addressables関連や、LayerやTagなど、Editer内で定義されている情報をもとに、定数を自動生成するためのGenerator.
    /// </summary>
    public class CodeGenerator {

        /// <summary>
        /// 自動生成したファイルを格納する階層.
        /// </summary>
        public virtual string OutputDirPath { get; set; } = "Assets//00_OKGames/AutoGenerated";

        /// <summary>
        /// 自動生成したファイル名.
        /// </summary>
        public virtual string OutputFileName { get; set; } = "DummAutoGen.cs";

        /// <summary>
        /// 自動生成時のファイル内のクラスコメント部の内容.
        /// </summary>
        public virtual string fileHeader { get; set; } =
@"//------------------------------------------------------------------------------
// This file is AUTO-GENERATED by {0}.
//------------------------------------------------------------------------------
";

        /// <summary>
        /// 自動生成時のファイル内のnamespace名.
        /// </summary>
        public virtual string NamespaceName { get; set; } = "OKGamesLib";

        /// <summary>
        /// 自動生成時のファイル内のクラス名.
        /// </summary>
        public virtual string ClassName { get; set; } = "DummyClass";

        /// <summary>
        /// 自動生成時のファイル内のnamespaceとclass名記述部のフォーマット.
        /// </summary>
        public virtual string ClassHeader { get; set; } =
@"namespace {0}
{{
    public static class {1} {{
";

        /// <summary>
        /// 変数名のフォーマット.
        /// </summary>
        public virtual string VariableHader { get; set; } =
@"      public enum {0} {{
";

        /// <summary>
        /// 自動生成時のファイル内の末尾の記述.
        /// </summary>
        public virtual string ClassFooter { get; set; } =
@"      }
    }
}
";

        /// <summary>
        /// 1インデントとする文字列(スペース2つ).
        /// </summary>
        public virtual string IndentUnit { get; set; } = "  ";

        /// <summary>
        /// 外部クラスからの書き込み.
        /// </summary>
        /// <param name="builder">書き込み用のStringBuilder.</param>
        protected virtual void WriteOuter(StringBuilder builder) {
            string generatorName = this.GetType().FullName;
            builder.AppendFormat(fileHeader, generatorName);
            builder.AppendFormat(ClassHeader, NamespaceName, ClassName);
            builder.AppendFormat(VariableHader, ClassName + "Enum");
            WriteInner(builder);
            builder.Append(ClassFooter);
        }

        /// <summary>
        /// 内部クラスからの書き込み
        /// </summary>
        /// <param name="builder">書き込み用のStringBuilder.</param>
        protected virtual void WriteInner(StringBuilder builder) {
            // 継承先で記述すること.
        }

        /// <summary>
        /// インデントの文字列を返す.
        /// </summary>
        /// <param name="indentLevel">取得したいインデントの深さ.</param>
        /// <returns></returns>
        protected string MakeIndent(int indentLevel) {
            return StringExtension.Repeat(IndentUnit, indentLevel);
        }

        /// <summary>
        /// Symbolsの情報を書き込む.
        /// </summary>
        /// <param name="builder">書き込み用のStringBuilder.</param>
        /// <param name="labelSet">変数の情報.</param>
        /// <param name="indentLevel">インデント数</param>
        /// <param name="alignEqual">行端を揃えるか.</param>
        protected void AppendSymbols(
            StringBuilder builder, HashSet<string> labelSet,
            int indentLevel = 4, bool alignEqual = true) {

            if (labelSet.Count == 0) {
                return;
            }

            var labels = labelSet.ToList();
            var symbols = new List<string>();
            var symbolToLabel = new Dictionary<string, int>();

            int index = 0;
            foreach (string label in labels) {
                string symbol = MakeSafeSymbol(label);
                symbols.Add(symbol);
                symbolToLabel.Add(symbol, index);
                ++index;
            }

            int maxSymbolLength = symbols.Select(s => s.Length).Max();
            string indent = MakeIndent(indentLevel);

            foreach (string symbol in symbols) {
                int label;
                if (symbolToLabel.TryGetValue(symbol, out label)) {
                    string spacing = alignEqual ? StringExtension.Repeat(" ", maxSymbolLength - symbol.Length) : "";
                    builder.AppendLine($"{indent}{symbol}{spacing} = {label},");
                }
            }
        }

        /// <summary>
        /// Symbolsの情報を書き込む.
        /// </summary>
        /// <param name="builder">書き込み用のStringBuilder.</param>
        /// <param name="symbolToNum">変数の情報.</param>
        /// <param name="indentLevel">インデント数</param>
        /// <param name="alignEqual">行端を揃えるか.</param>
        protected void AppendSymbols(
            StringBuilder builder, Dictionary<string, int> symbolToNum,
            int indentLevel = 4, bool alignEqual = true) {
            if (symbolToNum.Count == 0) {
                return;
            }

            var numToSybol = symbolToNum.Reverse().ToDictionary(x => x.Value, x => MakeSafeSymbol(x.Key));
            var numbers = numToSybol.Keys.ToList();
            var symbols = numToSybol.Values.ToList();

            int maxSymbolLength = symbols.Select(s => s.Length).Max();
            string indent = MakeIndent(indentLevel);

            numbers.Sort();
            foreach (int num in numbers) {
                string symbol;
                if (numToSybol.TryGetValue(num, out symbol)) {
                    string spacing = alignEqual ? StringExtension.Repeat(" ", maxSymbolLength - symbol.Length) : "";
                    builder.AppendLine($"{indent}{symbol}{spacing} = {num},");
                }
            }
        }

        /// <summary>
        /// 変数情報を扱える文字列に置き換えて返す.
        /// </summary>
        /// <param name="label">変数情報.</param>
        /// <returns>調整したCsharpの記述で扱える文字列.</returns>
        protected string MakeSafeSymbol(string label) {
            string symbol = Regex.Replace(label, "[^a-zA-Z0-9]", "_");
            if ('0' <= symbol[0] && symbol[0] <= '9') {
                symbol = '_' + symbol;
            }
            return symbol;
        }

        /// <summary>
        /// BuilderにAppendして定数ファイルを生成する.
        /// </summary>
        public void Generate() {
            if (!Directory.Exists(OutputDirPath)) {
                Directory.CreateDirectory(OutputDirPath);
            }

            string outPath = $"{OutputDirPath}/{OutputFileName}";
            Log.Notice($"Generate Code : {outPath}");

            using (var fileStream = File.Open(outPath, FileMode.Create, FileAccess.Write)) {
                using (var streamWriter = new StreamWriter(fileStream)) {
                    var stringBuilder = new StringBuilder();
                    WriteOuter(stringBuilder);
                    streamWriter.Write(stringBuilder.ToString());
                }
            }

            AssetDatabase.Refresh();
            Log.Success("Generate Code Completed.");
        }
    }
}
